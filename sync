"use strict";

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _ru = _interopRequireDefault(require("./translations/ru.json"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _request = _interopRequireDefault(require("request"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

try {
  /** ================ CHECK process.argv ================ */
  if (!["ru", "en", "fr"].includes(process.argv[2])) throw new Error("Needed param LANG after name script ");
  if (!["mobimed_site", "mobi_app", "telemedialog", "telemed", "test"].includes(process.argv[3])) throw new Error("Needed param PROJECT_NAME after param LANG");
  /** ================ CONSTs ================ */

  const LANG = process.argv[2];
  const PROJECT_NAME = process.argv[3];
  const HOST = "http://localhost:8000";
  const url = `${HOST}/api/translations/download/${LANG}/${PROJECT_NAME}`;
  const urlUpload = `${HOST}/api/translations/import-file`;
  const distFile = `${__dirname}/translations/${LANG}.json`;

  const uploadData = async () => {
    /** ================ UPLOAD ================*/
    try {
      const req = await _request.default.put(urlUpload, (err, resp, body) => {
        if (err) {
          console.error("Error!", err.message);
        } else {
          console.log("Result: " + body);
        }
      });
      const form = req.form();
      form.append("filedata", _fs.default.createReadStream(distFile));
      form.append("filename", `${LANG}.json`);
      form.append("account_id", "1");
      form.append("pname", "test");
      form.append("deleteOldKeys", "false");
      form.append("doBackup", "true");
    } catch (error) {
      console.log(error.message);
    }
  };
  /** ================ CHECK Destination file ================ */


  if (!_fs.default.existsSync(distFile)) {
    throw new Error("Destination file not exists");
  }
  /** ================ GET REMOTE JSON ================ */


  (0, _requestPromise.default)({
    url,
    method: "GET",
    json: true
  }).then(remoteJson => {
    /** ================ MERGE LOCAL AND REMOTE ================ */
    const mergedJson = (0, _lodash.default)(remoteJson, _ru.default);
    /** ================ SAVE mergedJson TO LOCAL ================ */

    return new Promise(function (resolve, reject) {
      _fs.default.writeFile(distFile, JSON.stringify(mergedJson, null, 2), err => {
        if (err) reject(err);else resolve(true);
      });
    });
  }).then(saved => {
    if (saved) {
      setTimeout(uploadData, 2000); //uploadData();
    }
  }).catch(err => console.error(err.message));
} catch (e) {
  console.log(e.message);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zeW5jLmpzIl0sIm5hbWVzIjpbImluY2x1ZGVzIiwicHJvY2VzcyIsImFyZ3YiLCJFcnJvciIsIkxBTkciLCJQUk9KRUNUX05BTUUiLCJIT1NUIiwidXJsIiwidXJsVXBsb2FkIiwiZGlzdEZpbGUiLCJfX2Rpcm5hbWUiLCJ1cGxvYWREYXRhIiwicmVxIiwicmVxdWVzdCIsInB1dCIsImVyciIsInJlc3AiLCJib2R5IiwiY29uc29sZSIsImVycm9yIiwibWVzc2FnZSIsImxvZyIsImZvcm0iLCJhcHBlbmQiLCJmcyIsImNyZWF0ZVJlYWRTdHJlYW0iLCJleGlzdHNTeW5jIiwibWV0aG9kIiwianNvbiIsInRoZW4iLCJyZW1vdGVKc29uIiwibWVyZ2VkSnNvbiIsImxvY2FsSnNvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwid3JpdGVGaWxlIiwiSlNPTiIsInN0cmluZ2lmeSIsInNhdmVkIiwic2V0VGltZW91dCIsImNhdGNoIiwiZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQUk7QUFDRjtBQUNBLE1BQUksQ0FBQyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQkEsUUFBbkIsQ0FBNEJDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWIsQ0FBNUIsQ0FBTCxFQUNFLE1BQU0sSUFBSUMsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRixNQUNFLENBQUMsQ0FBQyxjQUFELEVBQWlCLFVBQWpCLEVBQTZCLGNBQTdCLEVBQTZDLFNBQTdDLEVBQXdELE1BQXhELEVBQWdFSCxRQUFoRSxDQUNDQyxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiLENBREQsQ0FESCxFQUtFLE1BQU0sSUFBSUMsS0FBSixDQUFVLDRDQUFWLENBQU47QUFFRjs7QUFDQSxRQUFNQyxJQUFJLEdBQUdILE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWIsQ0FBYjtBQUNBLFFBQU1HLFlBQVksR0FBR0os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QVU7QUFDVnhCLEVBQUFBLE9BQU8sQ0FBQ0csR0FBUixDQUFZcUIsQ0FBQyxDQUFDdEIsT0FBZDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1lcmdlIGZyb20gXCJsb2Rhc2gubWVyZ2VcIjtcbmltcG9ydCBsb2NhbEpzb24gZnJvbSBcIi4vdHJhbnNsYXRpb25zL3J1Lmpzb25cIjtcbmltcG9ydCByZXF1ZXN0UHJvbWlzZSBmcm9tIFwicmVxdWVzdC1wcm9taXNlXCI7XG5pbXBvcnQgcmVxdWVzdCBmcm9tIFwicmVxdWVzdFwiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG50cnkge1xuICAvKiogPT09PT09PT09PT09PT09PSBDSEVDSyBwcm9jZXNzLmFyZ3YgPT09PT09PT09PT09PT09PSAqL1xuICBpZiAoIVtcInJ1XCIsIFwiZW5cIiwgXCJmclwiXS5pbmNsdWRlcyhwcm9jZXNzLmFyZ3ZbMl0pKVxuICAgIHRocm93IG5ldyBFcnJvcihcIk5lZWRlZCBwYXJhbSBMQU5HIGFmdGVyIG5hbWUgc2NyaXB0IFwiKTtcbiAgaWYgKFxuICAgICFbXCJtb2JpbWVkX3NpdGVcIiwgXCJtb2JpX2FwcFwiLCBcInRlbGVtZWRpYWxvZ1wiLCBcInRlbGVtZWRcIiwgXCJ0ZXN0XCJdLmluY2x1ZGVzKFxuICAgICAgcHJvY2Vzcy5hcmd2WzNdXG4gICAgKVxuICApXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmVlZGVkIHBhcmFtIFBST0pFQ1RfTkFNRSBhZnRlciBwYXJhbSBMQU5HXCIpO1xuXG4gIC8qKiA9PT09PT09PT09PT09PT09IENPTlNUcyA9PT09PT09PT09PT09PT09ICovXG4gIGNvbnN0IExBTkcgPSBwcm9jZXNzLmFyZ3ZbMl07XG4gIGNvbnN0IFBST0pFQ1RfTkFNRSA9IHByb2Nlc3MuYXJndlszXTtcbiAgY29uc3QgSE9TVCA9IFwiaHR0cDovL2xvY2FsaG9zdDo4MDAwXCI7XG4gIGNvbnN0IHVybCA9IGAke0hPU1R9L2FwaS90cmFuc2xhdGlvbnMvZG93bmxvYWQvJHtMQU5HfS8ke1BST0pFQ1RfTkFNRX1gO1xuICBjb25zdCB1cmxVcGxvYWQgPSBgJHtIT1NUfS9hcGkvdHJhbnNsYXRpb25zL2ltcG9ydC1maWxlYDtcbiAgY29uc3QgZGlzdEZpbGUgPSBgJHtfX2Rpcm5hbWV9L3RyYW5zbGF0aW9ucy8ke0xBTkd9Lmpzb25gO1xuXG4gIGNvbnN0IHVwbG9hZERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgLyoqID09PT09PT09PT09PT09PT0gVVBMT0FEID09PT09PT09PT09PT09PT0qL1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXEgPSBhd2FpdCByZXF1ZXN0LnB1dCh1cmxVcGxvYWQsIChlcnIsIHJlc3AsIGJvZHkpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciFcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVzdWx0OiBcIiArIGJvZHkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGZvcm0gPSByZXEuZm9ybSgpO1xuICAgICAgZm9ybS5hcHBlbmQoXCJmaWxlZGF0YVwiLCBmcy5jcmVhdGVSZWFkU3RyZWFtKGRpc3RGaWxlKSk7XG4gICAgICBmb3JtLmFwcGVuZChcImZpbGVuYW1lXCIsIGAke0xBTkd9Lmpzb25gKTtcbiAgICAgIGZvcm0uYXBwZW5kKFwiYWNjb3VudF9pZFwiLCBcIjFcIik7XG4gICAgICBmb3JtLmFwcGVuZChcInBuYW1lXCIsIFwidGVzdFwiKTtcbiAgICAgIGZvcm0uYXBwZW5kKFwiZGVsZXRlT2xkS2V5c1wiLCBcImZhbHNlXCIpO1xuICAgICAgZm9ybS5hcHBlbmQoXCJkb0JhY2t1cFwiLCBcInRydWVcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfTtcblxuICAvKiogPT09PT09PT09PT09PT09PSBDSEVDSyBEZXN0aW5hdGlvbiBmaWxlID09PT09PT09PT09PT09PT0gKi9cbiAgaWYgKCFmcy5leGlzdHNTeW5jKGRpc3RGaWxlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkRlc3RpbmF0aW9uIGZpbGUgbm90IGV4aXN0c1wiKTtcbiAgfVxuXG4gIC8qKiA9PT09PT09PT09PT09PT09IEdFVCBSRU1PVEUgSlNPTiA9PT09PT09PT09PT09PT09ICovXG4gIHJlcXVlc3RQcm9taXNlKHtcbiAgICB1cmwsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGpzb246IHRydWUsXG4gIH0pXG4gICAgLnRoZW4oKHJlbW90ZUpzb24pID0+IHtcbiAgICAgIC8qKiA9PT09PT09PT09PT09PT09IE1FUkdFIExPQ0FMIEFORCBSRU1PVEUgPT09PT09PT09PT09PT09PSAqL1xuICAgICAgY29uc3QgbWVyZ2VkSnNvbiA9IG1lcmdlKHJlbW90ZUpzb24sIGxvY2FsSnNvbik7XG5cbiAgICAgIC8qKiA9PT09PT09PT09PT09PT09IFNBVkUgbWVyZ2VkSnNvbiBUTyBMT0NBTCA9PT09PT09PT09PT09PT09ICovXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmcy53cml0ZUZpbGUoZGlzdEZpbGUsIEpTT04uc3RyaW5naWZ5KG1lcmdlZEpzb24sIG51bGwsIDIpLCAoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICAgICAgZWxzZSByZXNvbHZlKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLnRoZW4oKHNhdmVkKSA9PiB7XG4gICAgICBpZiAoc2F2ZWQpIHtcbiAgICAgICAgc2V0VGltZW91dCh1cGxvYWREYXRhLCAyMDAwKTtcbiAgICAgICAgLy91cGxvYWREYXRhKCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSkpO1xufSBjYXRjaCAoZSkge1xuICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpO1xufVxuIl19